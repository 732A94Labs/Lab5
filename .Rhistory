data$
data$geojson[[1]]
data$
data[[1]]
req <- request("https://nominatim.openstreetmap.org/search") |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_url_query(
country = country_name,
format  = "jsonv2",
polygon_geojson = 1,
limit   = 1
)
resp <- req_perform(req)
stopifnot(resp_status(resp) == 200)
resp
data <- resp_body_json(resp, simplifyVector = TRUE)
data
data$geojson
# Wrap the returned geometry as a FeatureCollection so sf::st_read can ingest it.
feature <- list(
type = "Feature",
properties = list(
name = data$display_name,
osm_type = data$osm_type,
osm_id = data$osm_id
),
geometry = data$geojson
)
fc <- list(type = "FeatureCollection", features = list(feature))
tmp <- tempfile(fileext = ".geojson")
writeLines(toJSON(fc, auto_unbox = TRUE, digits = 7), tmp)
country <- st_read(tmp, quiet = TRUE) |> st_make_valid()
plot(st_geometry(country))
data$geojson
data$geojson[[1]]
jsonlite::prettify(data$geojson)
jsonlite::prettify(data$geojson)
plot(st_geometry(country))
class(data$geojson[[1]])   # "list" is ideal; "character" means it’s a JSON string
cat(jsonlite::prettify(jsonlite::toJSON(data$geojson[[1]], auto_unbox = TRUE)), "\n")
geom <- jsonlite::fromJSON(data$geojson[[1]])
val <- data$geojson[[1]]
class(val)
if (is.character(val)) substr(val, 1, 20)
req <- request("https://nominatim.openstreetmap.org/search") |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_url_query(
country = country_name,
format  = "geojson",
polygon_geojson = 1,
limit   = 1
)
resp <- req_perform(req)
resp <- req_perform(req)
data <- resp_body_json(resp, simplifyVector = TRUE)
data$display_name
jsonlite::prettify(data$geojson)
data$features
data$features
length(data$features)
data$features[0]
data$features[1]
data$features[[1]]
data$features[[2]]
data$features[[3]]
data$features[[4]]
data$features[[5]]
req <- request("https://nominatim.openstreetmap.org/search") |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_url_query(
country = country_name,
format  = "json",
polygon_geojson = 1,
limit   = 1
)
resp <- req_perform(req)
data <- resp_body_json(resp, simplifyVector = TRUE)
data$geojson
data$geojson[[1]]
shape <- st_geometry(data$geojson)
shape <- st_geometry(data$geojson[[1]])
st_as_sfc(data$geojson, crs = 4326)
data$geojson
jsonlite::prettify(data$geojson)
jsonlite::prettify(data$geojson[[1]])
jsonlite::prettify(data$geojson[[2]])
jsonlite::prettify(data$geojson[[3]])
data$geojson[[2]]
jsonlite::prettify(data$geojson[[2]])
st_geometry(data$geojson[[2]])
val <- data$geojson[[1]]
class(val)
wkt <- data$geojson[[1]]        # "MultiPolygon(…)"
wkt <- data$geojson[[1]]
sfc <- st_as_sfc(wkt, crs = 4326)
sfc <- st_as_sfc(wkt, crs = 4326)
resp
resp[[1]]
resp$body
str(data$geojson, max.level = 1)
geom <- list(
type = data$geojson$type[1],
coordinates = data$geojson$coordinates[[1]]
)
geom
cat(jsonlite::prettify(jsonlite::toJSON(geom, auto_unbox = TRUE)), "\n")
i <- 1
feature <- list(
type = "Feature",
properties = list(
name     = data$display_name[i],
osm_type = data$osm_type[i],
osm_id   = data$osm_id[i]
),
geometry = geom
)
fc <- list(type = "FeatureCollection", features = list(feature))
tmp <- tempfile(fileext = ".geojson")
writeLines(toJSON(fc, auto_unbox = TRUE), tmp)
country <- st_read(tmp, quiet = TRUE) |> st_make_valid()
plot(st_geometry(country))
library(httr2)
library(httr2)
library(jsonlite)
library(sf)
country_name <- "Germany"  # change this
req <- request("https://nominatim.openstreetmap.org/search") |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_url_query(
country = country_name,
format  = "json",
polygon_geojson = 1,
limit   = 1
)
resp <- req_perform(req)
stopifnot(resp_status(resp) == 200)
data <- resp_body_json(resp, simplifyVector = TRUE)
data <- resp_body_json(resp, simplifyVector = TRUE)
if (length(data) == 0 || is.null(data[[1]]$geojson)) stop("No polygon returned")
str(data$geojson, max.level = 1)
geom <- list(
type = data$geojson$type[1],
coordinates = data$geojson$coordinates[[1]]
)
i <- 1
feature <- list(
type = "Feature",
properties = list(
name     = data$display_name[i],
osm_type = data$osm_type[i],
osm_id   = data$osm_id[i]
),
geometry = geom
)
fc <- list(type = "FeatureCollection", features = list(feature))
tmp <- tempfile(fileext = ".geojson")
writeLines(toJSON(fc, auto_unbox = TRUE), tmp)
country <- st_read(tmp, quiet = TRUE) |> st_make_valid()
plot(st_geometry(country))
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:json][timeout:180];
relation
["boundary"="administrative"]
["admin_level"="2"]
["ISO3166-1:alpha2"];
out tags;  -- just tags (no geometry)
'
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
stopifnot(resp_status(resp) == 200)
oj <- resp_body_json(resp, simplifyVector = FALSE)
# Convert Overpass JSON → data.frame of (rel_id, name, name_en, iso2, iso3)
els <- oj$elements
to_row <- function(el) {
tg <- el$tags %||% list()
list(
rel_id = el$id,
name   = tg$name %||% NA_character_,
name_en= tg[["name:en"]] %||% NA_character_,
iso2   = tg[["ISO3166-1:alpha2"]] %||% NA_character_,
iso3   = tg[["ISO3166-1:alpha3"]] %||% NA_character_
)
}
rows <- lapply(els, to_row)
df <- as.data.frame(do.call(rbind, rows), stringsAsFactors = FALSE)
# prefer English name if present
df$display <- ifelse(is.na(df$name_en) | df$name_en == "", df$name, df$name_en)
df[order(df$display), ]
}
`%||%` <- function(x, y) if (is.null(x)) y else x
countries <- fetch_countries()
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass)
}
countries <- fetch_countries()
resp
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass)
resp
}
countries <- fetch_countries()
countries
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass)
resp
}
countries <- fetch_countries()
countries
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
resp
}
countries <- fetch_countries()
countries
countries$body
data <- resp_body_json(resp)
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
data <- resp_body_json(resp)
return(data)
}
countries <- fetch_countries()
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
oj <- resp_body_json(resp, simplifyVector = FALSE)
return(oj)
}
countries <- fetch_countries()
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:json(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
oj <- resp_body_json(resp)
return(oj)
}
countries <- fetch_countries()
fetch_countries <- function() {
overpass <- "https://overpass-api.de/api/interpreter"
q <- '
[out:csv(
::type, ::id, type, boundary, land_area, "ISO3166-1", "name:en", "name",
::count; true; ","
)];
(
relation["type"="boundary"]["boundary"="administrative"]["admin_level"="2"];
relation["type"="land_area"]["admin_level"="2"];
);
out;
out count;
'
resp <- request(overpass) |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_method("POST") |>
req_body_raw(charToRaw(q)) |>
req_perform()
txt <- resp_body_string(resp)
df <- read.csv(text = txt, stringsAsFactors = FALSE, check.names = FALSE)
return(df)
}
countries <- fetch_countries()
countries
countries$name:en
countries$name:en
countries$"name:en"
fetch_country_geom_by_relation <- function(rel_id) {
# Nominatim wants a type prefix: R for relation
req <- request("https://nominatim.openstreetmap.org/lookup") |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_url_query(
osm_ids = paste0("R", rel_id),
format = "json",
polygon_geojson = 1
)
resp <- req_perform(req)
stopifnot(resp_status(resp) == 200)
dat <- resp_body_json(resp, simplifyVector = TRUE)
if (length(dat) == 0 || is.null(dat[[1]]$geojson)) stop("No geometry returned")
# geojson comes as a small data.frame with columns type + coordinates
geom <- list(
type = dat$geojson$type[1],
coordinates = dat$geojson$coordinates[[1]]
)
# Wrap into a FeatureCollection, then read with sf
feature <- list(type="Feature", properties=list(osm_id=rel_id), geometry=geom)
fc <- list(type="FeatureCollection", features=list(feature))
tmp <- tempfile(fileext = ".geojson")
writeLines(toJSON(fc, auto_unbox = TRUE), tmp)
st_read(tmp, quiet = TRUE) |> st_make_valid()
}
countries <- fetch_countries()
countries$@id
countries$id
countries$"@id"
countries[,c("@id", name)]
countries[, c("id","name")]
countries[, c("@id","name")]
countries[, c("@id","name:en")]
country_sf <- fetch_country_geom_by_relation("9407")
fetch_country_geom_by_relation <- function(rel_id) {
# Nominatim wants a type prefix: R for relation
req <- request("https://nominatim.openstreetmap.org/lookup") |>
req_user_agent("YourAppName/1.0 (contact@example.com)") |>
req_url_query(
osm_ids = paste0("R", rel_id),
format = "json",
polygon_geojson = 1
)
resp <- req_perform(req)
stopifnot(resp_status(resp) == 200)
dat <- resp_body_json(resp, simplifyVector = TRUE)
# geojson comes as a small data.frame with columns type + coordinates
geom <- list(
type = dat$geojson$type[1],
coordinates = dat$geojson$coordinates[[1]]
)
# Wrap into a FeatureCollection, then read with sf
feature <- list(type="Feature", properties=list(osm_id=rel_id), geometry=geom)
fc <- list(type="FeatureCollection", features=list(feature))
tmp <- tempfile(fileext = ".geojson")
writeLines(toJSON(fc, auto_unbox = TRUE), tmp)
st_read(tmp, quiet = TRUE) |> st_make_valid()
}
country_sf <- fetch_country_geom_by_relation("9407")
plot(st_geometry(country_sf))
select_random_country <- function(countries) {
df[sample.int(nrow(countries), 1), , drop = FALSE]
choice <- pick_random_country(countries)
return(choice)
}
select_random_country(countries[, c("@id","name:en")])
countries[, c("@id","name:en")]
type(countries[, c("@id","name:en")])
countries[, c("@id","name:en")]
select_random_country(countries[, c("@id","name:en")])
select_random_country <- function(countries) {
countries[sample.int(nrow(countries), 1), , drop = FALSE]
choice <- pick_random_country(countries)
return(choice)
}
select_random_country(countries[, c("@id","name:en")])
select_random_country <- function(countries) {
choice <- countries[sample.int(nrow(countries), 1), , drop = FALSE]
return(choice)
}
select_random_country(countries[, c("@id","name:en")])
select_random_country(countries[, c("@id","name:en")])
)
select_random_country <- function(countries) {
choice <- countries[sample.int(nrow(countries), 1), , drop = FALSE]
return(choice)
}
select_random_country(countries[, c("@id","name:en")])
select_random_country(countries[, c("@id","name:en")])
select_random_country(countries[, c("@id","name:en")])$"name:en"
devtools::load_all()
start()
start()
devtools::load_all()
start()
devtools::load_all()
start()
start()
devtools::load_all()
start()
start()
devtools::load_all()
start()
start()
start()
start()
devtools::load_all()
start()
start()
devtools::load_all()
start()
countries
library(shiny)
install.packages("shiny")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
shiny::runApp()
devtools::load_all()
run_app()
start()
devtools::load_all()
start()
devtools::load_all()
start()
devtools::load_all()
start()
run_app()
devtools::load_all()
start()
